{"ast":null,"code":"var _jsxFileName = \"C:\\\\Onthetable3.0\\\\onthetable3.0\\\\client\\\\src\\\\pages\\\\MapPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GET_FARMS = gql`\n  query GetFarms {\n    farms {\n      _id\n      name\n      description\n      location {\n        coordinates\n      }\n      crops\n      owner\n      imageUrl\n    }\n  }\n`;\nconst MapPage = () => {\n  _s();\n  var _data$farms;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_FARMS);\n  const [selectedCrop, setSelectedCrop] = useState('');\n\n  // Extract unique crops for filtering\n  const allCrops = (data === null || data === void 0 ? void 0 : (_data$farms = data.farms) === null || _data$farms === void 0 ? void 0 : _data$farms.flatMap(farm => farm.crops || []).filter((crop, index, self) => crop && self.indexOf(crop) === index).sort()) || [];\n\n  // Filter farms based on selected crop\n  const filteredFarms = selectedCrop ? data === null || data === void 0 ? void 0 : data.farms.filter(farm => {\n    var _farm$crops;\n    return (_farm$crops = farm.crops) === null || _farm$crops === void 0 ? void 0 : _farm$crops.includes(selectedCrop);\n  }) : data === null || data === void 0 ? void 0 : data.farms;\n\n  // Default map center (adjust as needed for your region)\n  const defaultCenter = [44.0, -79.5]; // Example: Ontario, Canada\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Farm Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '1rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"crop-filter\",\n        style: {\n          marginRight: '0.5rem'\n        },\n        children: \"Filter by crop:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"crop-filter\",\n        value: selectedCrop,\n        onChange: e => setSelectedCrop(e.target.value),\n        style: {\n          width: 'auto',\n          display: 'inline-block'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"All Crops\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), allCrops.map(crop => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: crop,\n          children: crop\n        }, crop, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading farm data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error loading farm data: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-container\",\n        children: /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: defaultCenter,\n          zoom: 7,\n          style: {\n            height: '100%',\n            width: '100%'\n          },\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), filteredFarms === null || filteredFarms === void 0 ? void 0 : filteredFarms.map(farm => {\n            var _farm$location, _farm$crops2;\n            // Skip farms with no valid coordinates\n            if (!((_farm$location = farm.location) !== null && _farm$location !== void 0 && _farm$location.coordinates) || !Array.isArray(farm.location.coordinates) || farm.location.coordinates.length !== 2) {\n              return null;\n            }\n\n            // GeoJSON format is [longitude, latitude], but Leaflet needs [latitude, longitude]\n            const position = [farm.location.coordinates[1], farm.location.coordinates[0]];\n            return /*#__PURE__*/_jsxDEV(Marker, {\n              position: position,\n              children: /*#__PURE__*/_jsxDEV(Popup, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                    children: farm.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 93,\n                    columnNumber: 25\n                  }, this), farm.description && /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: farm.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 46\n                  }, this), ((_farm$crops2 = farm.crops) === null || _farm$crops2 === void 0 ? void 0 : _farm$crops2.length) > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                      children: \"Crops:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 96,\n                      columnNumber: 30\n                    }, this), \" \", farm.crops.join(', ')]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 96,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Link, {\n                    to: `/farm/${farm._id}`,\n                    children: \"View Details\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 21\n              }, this)\n            }, farm._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"farm-list\",\n        style: {\n          marginTop: '2rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Farm List \", selectedCrop && `- ${selectedCrop}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid\",\n          children: (filteredFarms === null || filteredFarms === void 0 ? void 0 : filteredFarms.length) > 0 ? filteredFarms.map(farm => {\n            var _farm$description, _farm$crops3;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: farm.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 21\n              }, this), farm.imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n                src: farm.imageUrl,\n                alt: farm.name,\n                style: {\n                  width: '100%',\n                  height: '150px',\n                  objectFit: 'cover',\n                  marginBottom: '1rem'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [(_farm$description = farm.description) === null || _farm$description === void 0 ? void 0 : _farm$description.substring(0, 100), \"...\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 21\n              }, this), ((_farm$crops3 = farm.crops) === null || _farm$crops3 === void 0 ? void 0 : _farm$crops3.length) > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Crops:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 26\n                }, this), \" \", farm.crops.join(', ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: `/farm/${farm._id}`,\n                className: \"btn\",\n                children: \"View Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 21\n              }, this)]\n            }, farm._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No farms found with the selected criteria.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(MapPage, \"pMo1mpwQHHEHwEN2aDd8LdqMSlc=\", false, function () {\n  return [useQuery];\n});\n_c = MapPage;\nexport default MapPage;\nvar _c;\n$RefreshReg$(_c, \"MapPage\");","map":{"version":3,"names":["React","useState","useQuery","gql","Link","MapContainer","TileLayer","Marker","Popup","jsxDEV","_jsxDEV","Fragment","_Fragment","GET_FARMS","MapPage","_s","_data$farms","loading","error","data","selectedCrop","setSelectedCrop","allCrops","farms","flatMap","farm","crops","filter","crop","index","self","indexOf","sort","filteredFarms","_farm$crops","includes","defaultCenter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","htmlFor","marginRight","id","value","onChange","e","target","width","display","map","message","center","zoom","height","attribution","url","_farm$location","_farm$crops2","location","coordinates","Array","isArray","length","position","name","description","join","to","_id","marginTop","_farm$description","_farm$crops3","imageUrl","src","alt","objectFit","substring","_c","$RefreshReg$"],"sources":["C:/Onthetable3.0/onthetable3.0/client/src/pages/MapPage.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useQuery, gql } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\nconst GET_FARMS = gql`\r\n  query GetFarms {\r\n    farms {\r\n      _id\r\n      name\r\n      description\r\n      location {\r\n        coordinates\r\n      }\r\n      crops\r\n      owner\r\n      imageUrl\r\n    }\r\n  }\r\n`;\r\n\r\nconst MapPage = () => {\r\n  const { loading, error, data } = useQuery(GET_FARMS);\r\n  const [selectedCrop, setSelectedCrop] = useState('');\r\n  \r\n  // Extract unique crops for filtering\r\n  const allCrops = data?.farms\r\n    ?.flatMap(farm => farm.crops || [])\r\n    .filter((crop, index, self) => crop && self.indexOf(crop) === index)\r\n    .sort() || [];\r\n  \r\n  // Filter farms based on selected crop\r\n  const filteredFarms = selectedCrop\r\n    ? data?.farms.filter(farm => farm.crops?.includes(selectedCrop))\r\n    : data?.farms;\r\n\r\n  // Default map center (adjust as needed for your region)\r\n  const defaultCenter = [44.0, -79.5]; // Example: Ontario, Canada\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Farm Map</h1>\r\n      \r\n      <div style={{ marginBottom: '1rem' }}>\r\n        <label htmlFor=\"crop-filter\" style={{ marginRight: '0.5rem' }}>\r\n          Filter by crop: \r\n        </label>\r\n        <select \r\n          id=\"crop-filter\"\r\n          value={selectedCrop}\r\n          onChange={(e) => setSelectedCrop(e.target.value)}\r\n          style={{ width: 'auto', display: 'inline-block' }}\r\n        >\r\n          <option value=\"\">All Crops</option>\r\n          {allCrops.map(crop => (\r\n            <option key={crop} value={crop}>{crop}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      \r\n      {loading ? (\r\n        <p>Loading farm data...</p>\r\n      ) : error ? (\r\n        <p>Error loading farm data: {error.message}</p>\r\n      ) : (\r\n        <>\r\n          <div className=\"map-container\">\r\n            <MapContainer \r\n              center={defaultCenter} \r\n              zoom={7} \r\n              style={{ height: '100%', width: '100%' }}\r\n            >\r\n              <TileLayer\r\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n              />\r\n              \r\n              {filteredFarms?.map(farm => {\r\n                // Skip farms with no valid coordinates\r\n                if (!farm.location?.coordinates || \r\n                    !Array.isArray(farm.location.coordinates) || \r\n                    farm.location.coordinates.length !== 2) {\r\n                  return null;\r\n                }\r\n                \r\n                // GeoJSON format is [longitude, latitude], but Leaflet needs [latitude, longitude]\r\n                const position = [farm.location.coordinates[1], farm.location.coordinates[0]];\r\n                \r\n                return (\r\n                  <Marker key={farm._id} position={position}>\r\n                    <Popup>\r\n                      <div>\r\n                        <h3>{farm.name}</h3>\r\n                        {farm.description && <p>{farm.description}</p>}\r\n                        {farm.crops?.length > 0 && (\r\n                          <p><strong>Crops:</strong> {farm.crops.join(', ')}</p>\r\n                        )}\r\n                        <Link to={`/farm/${farm._id}`}>View Details</Link>\r\n                      </div>\r\n                    </Popup>\r\n                  </Marker>\r\n                );\r\n              })}\r\n            </MapContainer>\r\n          </div>\r\n          \r\n          <div className=\"farm-list\" style={{ marginTop: '2rem' }}>\r\n            <h2>Farm List {selectedCrop && `- ${selectedCrop}`}</h2>\r\n            <div className=\"grid\">\r\n              {filteredFarms?.length > 0 ? (\r\n                filteredFarms.map(farm => (\r\n                  <div key={farm._id} className=\"card\">\r\n                    <h3>{farm.name}</h3>\r\n                    {farm.imageUrl && (\r\n                      <img \r\n                        src={farm.imageUrl} \r\n                        alt={farm.name} \r\n                        style={{ width: '100%', height: '150px', objectFit: 'cover', marginBottom: '1rem' }}\r\n                      />\r\n                    )}\r\n                    <p>{farm.description?.substring(0, 100)}...</p>\r\n                    {farm.crops?.length > 0 && (\r\n                      <p><strong>Crops:</strong> {farm.crops.join(', ')}</p>\r\n                    )}\r\n                    <Link to={`/farm/${farm._id}`} className=\"btn\">View Details</Link>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <p>No farms found with the selected criteria.</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}